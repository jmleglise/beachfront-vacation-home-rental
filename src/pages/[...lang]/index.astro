---


import BlogCard from "@/components/BlogCard.astro";
import ImageMod from "@/components/ImageMod.astro";
import Base from "@/layouts/Base.astro";
import { getListPage, getSinglePage } from "@/lib/contentParser.astro";
import { supportedLang } from "@/lib/utils/languageParser";
import { markdownify } from "@/lib/utils/textConverter";
import CallToAction from "@/partials/CallToAction.astro";
import Testimonial from "@/partials/Testimonial.astro";
import BannerSlider from "@/partials/BannerSlider.astro";
import type { Feature } from "@/types";
import type { ContentEntryMap } from "astro:content";
import { FaCheck } from "react-icons/fa";



export function getStaticPaths() {
  const paths = supportedLang.map((lang) => ({
    params: { lang: lang || undefined },
  }));
  return paths;
}

const { lang } = Astro.params;
const homepage = await getListPage("homepage", lang as keyof ContentEntryMap);
const { meta_title, description, schemaVacationRental, banner, features, nous } = homepage[0].data;

const testimonial = await getSinglePage(
  "sections",
  lang as keyof ContentEntryMap,
  "testimonial",
);

const banners = [
  { src: "/images/hp_banner.jpg", alt: "Nature 1" },
  { src: "/images/tourisme/dune.jpg", alt: "Nature 2" },
  { src: "/images/tourisme/horizon.jpg", alt: "Nature 3" },
  { src: "/images/tourisme/cabane.jpg", alt: "Nature 4" },
];


const call_to_action = await getSinglePage(
  "sections",
  lang as keyof ContentEntryMap,
  "call-to-action",
);

const redirectionScript = `
  <script>
    const userLang = navigator.language || navigator.userLanguage;
    const currentPath = window.location.pathname;
    const userLangPreference = localStorage.getItem("userLangPreference");

    // Si l'utilisateur a déjà choisi une langue, ne pas rediriger
    if (!userLangPreference) {
      if (!userLang.startsWith('fr') && !currentPath.startsWith('/en/')) {
        localStorage.setItem("userLangPreference", "en");
        window.location.href = "/en/";
      } else if (userLang.startsWith('fr') && !currentPath.startsWith('/fr/')) {
        localStorage.setItem("userLangPreference", "fr");
        window.location.href = "/fr/";
      }
    }
  </script>`;


const BLOG_FOLDER = "blog";
const posts = await getSinglePage(BLOG_FOLDER, lang as keyof ContentEntryMap);
const shuffledPosts = posts.sort(() => 0.5 - Math.random()).slice(0, 2);


---

<Base meta_title={meta_title} description={description} schemaVacationRental={schemaVacationRental} set:html={redirectionScript}> 



  <!-- Banner -->
  <section class="section">
    <div class="container">
      <!-- Carrousel avec titre superposé -->
      <div class="relative w-full">
        <!-- Carrousel -->
          <BannerSlider banners={banners} />

        <!-- Titre superposé -->
        <div class="absolute inset-0 z-10 flex items-center justify-center pointer-events-none">
          <h1
            set:html={markdownify(banner.title)}
            class="text-center text-white text-lg md:text-2xl lg:text-4xl font-bold bg-black/50 px-4 py-2 rounded-lg"
          />
        </div>
      </div>

        <!-- 4 blocs -->
        <div class="flex justify-center space-x-8">
          <!-- Bloc 1 -->
          <div class="flex items-center space-x-2">
            <span>10</span><img
              src="/images/pax.svg"
              alt="10 Guests"
              class="w-10 h-10"
            />
          </div>

          <!-- Bloc 2 -->
          <div class="flex items-center space-x-2">
            <span>5</span><img
              src="/images/room.svg"
              alt="5 rooms"
              class="w-10 h-10"
            />
          </div>

          <!-- Bloc 3 -->
          <div class="flex items-center space-x-2">
            <span>3</span>
            <img src="/images/shower.png" alt="3 shower" class="w-6 h-9" />
          </div>

          <!-- Bloc 4 -->
          <div class="flex items-center space-x-2">
            <span></span><img
              src="/images/beach.svg"
              alt="beachfront"
              class="w-12 h-14"
            />
          </div>
        </div>

        <p set:html={markdownify(banner.content)} class="mb-8" />
      </div>

  </section>

  <!-- /Banner -->

  <!-- Features -->
  {
    features.map((feature: Feature, index: number) => (
      <section class={`section-sm ${index % 2 === 0 && "bg-gradient"}`}>
        <div class="container">
          <div class="row items-center justify-between">
            <div
              class={`mb:md-0 mb-6 md:col-5 ${index % 2 !== 0 && "md:order-2"}`}
            >
              <ImageMod
                src={feature.image}
                height={480}
                width={520}
                alt={feature.title}
                format="webp"
              />
            </div>
            <div class={`md:col-7 lg:col-6 ${index % 2 !== 0 && "md:order-1"}`}>
              <h2 set:html={markdownify(feature.title)} class="mb-4" />
              <p set:html={markdownify(feature.content)} class="mb-8 text-lg" />
              <ul>
                {feature.bulletpoints.map((bullet: string) => (
                  <li class="relative mb-4 pl-6">
                    <FaCheck className={"absolute left-0 top-1.5"} />
                    <span set:html={markdownify(bullet)} />
                  </li>
                ))}
              </ul>
              {feature.button.enable && (
                <a
                  class="btn btn-primary mt-5"
                  href={feature.button.link}
                  target="_self"
                >
                  {feature.button.label}
                </a>
              )}
            </div>
          </div>
        </div>
      </section>
    ))
  }



    <!-- /Features 
    <Testimonial testimonial={testimonial[0]} />
  <CallToAction call_to_action={call_to_action[0]} />
  -->

  <!-- Nous -->
  <section class="section pt-14">
    <div class="container">
      <div class="row justify-center">
        <!--      
      {
        nous.image && (
          <div class="col-12">
            <ImageMod
              src={nous.image}
              height={380}
              width={1200}
              alt="nous"
              format="webp"
            />
          </div>
        )
      }
-->

        <div class="lg:col-10 md:col-9 mb-8 text-center">
          <h2
            set:html={markdownify(nous.title)}
            class="mb-4 text-h3 lg:text-h1"
          />

          <p set:html={markdownify(nous.content)} class="mb-8" />
        </div>
      </div>
    </div>
  </section>
  <!-- /Nous -->

<!-- Blog Posts Aléatoires -->
<section class="section">
  <div class="container">
    <div class="row gx-5">
      <div class="lg:col-8 mx-auto">
        <div class="row">
          {shuffledPosts.map((post) => (
            <div class="mb-14 md:col-6">
              <BlogCard data={post} />
            </div>
          ))}
        </div>
      </div>
    </div>
  </div>
</section>


</Base>
