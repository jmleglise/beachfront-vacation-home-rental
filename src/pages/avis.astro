---
import Base from "@/layouts/Base.astro";

export function getStaticPaths() {
  const paths = supportedLang.map((lang) => ({
    params: { lang: lang || undefined },
  }));
  return paths;
}

const botToken = import.meta.env.PUBLIC_BOT_TOKEN;
const chatId = import.meta.env.PUBLIC_CHAT_ID;
---

<Base title="Avis - Villa Tamaris" meta_title="Laissez un avis" description="Votre retour est précieux">
  <div class="container mx-auto px-4 text-center py-10 max-w-md">
    <h1 class="text-2xl font-light mb-4">Villa Tamaris</h1>

    <div id="star-container" class="flex justify-center gap-3 mb-6">
      <div class="star w-10 h-10 rounded-full border-2 border-gray-400 cursor-pointer" data-value="1"></div>
      <div class="star w-10 h-10 rounded-full border-2 border-gray-400 cursor-pointer" data-value="2"></div>
      <div class="star w-10 h-10 rounded-full border-2 border-gray-400 cursor-pointer" data-value="3"></div>
      <div class="star w-10 h-10 rounded-full border-2 border-gray-400 cursor-pointer" data-value="4"></div>
      <div class="star w-10 h-10 rounded-full border-2 border-gray-400 cursor-pointer" data-value="5"></div>
    </div>

    <form id="review-form" class="hidden flex flex-col gap-4">
      <textarea id="comment" class="border p-2 rounded" placeholder="Votre commentaire..."></textarea>
      <button type="submit" class="bg-black text-white py-2 rounded">Publier</button>
    </form>

    <div id="message" class="mt-6 text-lg font-medium"></div>
  </div>

  <script is:inline>
    const botToken = `${botToken}`;
    const chatId = `${chatId}`;
    const redirectUrl = "https://g.page/r/CTOZ9gJDprgQEAE/review";

    document.addEventListener("DOMContentLoaded", () => {
      const stars = document.querySelectorAll('.star');
      const form = document.getElementById('review-form');
      const comment = document.getElementById('comment');
      const message = document.getElementById('message');
      const starContainer = document.getElementById('star-container');

      let selected = 0;

      stars.forEach((star, i) => {
        star.addEventListener('mouseenter', () => highlight(i));
        star.addEventListener('mouseleave', clear);
        star.addEventListener('click', () => {
          selected = i + 1;
          if (selected === 5) {
            window.location.href = redirectUrl;
          } else {
            form.classList.remove('hidden');
          }
        });
      });

      function highlight(index) {
        stars.forEach((s, i) => {
          s.classList.toggle("border-yellow-400", i <= index);
          s.classList.toggle("border-gray-400", i > index);
        });
      }

      function clear() {
        stars.forEach((s) => {
          s.classList.remove("border-yellow-400");
          s.classList.add("border-gray-400");
        });
      }

      form.addEventListener('submit', async (e) => {
        e.preventDefault();
        const text = comment.value.trim();
        try {
          const res = await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ chat_id: chatId, text: `⭐ ${selected}/5\n\n${text}` })
          });

          starContainer.remove();
          form.remove();
          message.textContent = res.ok ? "Merci pour votre avis !" : "Erreur d'envoi. Veuillez vérifier votre connexion.";
        } catch {
          starContainer.remove();
          form.remove();
          message.textContent = "Erreur d'envoi. Veuillez vérifier votre connexion.";
        }
      });
    });
  </script>
</Base>
